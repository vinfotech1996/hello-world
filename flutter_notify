import 'dart:developer';

import 'package:animated_notch_bottom_bar/animated_notch_bottom_bar/animated_notch_bottom_bar.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app/yoga/YogaSchedulerHome.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:permission_handler/permission_handler.dart';


import 'IconTextRow.dart';
import 'fav_screen.dart';
import 'my_provider_data.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  initializeTimeZone();
  await _requestNotificationPermission();
  await _initializeNotifications(); // Ensure this is called
  runApp(const MyApp());
}

void initializeTimeZone() {
  tz.initializeTimeZones();
  tz.setLocalLocation(tz.getLocation('Asia/Kolkata'));
}

final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();

 _initializeNotifications() async {
  const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
  const initSettings = InitializationSettings(android: androidInit);
  await _flutterLocalNotificationsPlugin.initialize(initSettings);
  await _createNotificationChannel();
}

Future<void> _createNotificationChannel() async {
  const androidChannel = AndroidNotificationChannel(
    'yoga_channel',
    'Yoga Notifications',
    description: 'Notifications for Yoga schedules',
    importance: Importance.max,
  );
  await _flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(androidChannel);
  await _flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
      AndroidFlutterLocalNotificationsPlugin>()?.requestNotificationsPermission();
  await _flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
      AndroidFlutterLocalNotificationsPlugin>()?.requestExactAlarmsPermission();
}

Future<void> _requestNotificationPermission() async {
  if (await Permission.notification.isDenied) {
    await Permission.notification.request();
  }
}
class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Notch Bottom Bar',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
     home:   YogaSchedulerHome(),
     /* home: ChangeNotifierProvider(
        create: (_) => MyProviderData(),
        child: FavScreen(),
      ),*/
    );
  }
}
---------------------------------------------------------------------

import 'package:flutter/material.dart';

class AddScheduleScreen extends StatefulWidget {
  @override
  _AddScheduleScreenState createState() => _AddScheduleScreenState();
}

class _AddScheduleScreenState extends State<AddScheduleScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _titleController = TextEditingController();
  TimeOfDay? _selectedTime;
  String _repeat = 'Today';
  final Map<String, bool> _weekdays = {
    'Sun': false,
    'Mon': false,
    'Tue': false,
    'Wed': false,
    'Thu': false,
    'Fri': false,
    'Sat': false,
  };

  void _pickTime() async {
    final TimeOfDay? time = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );
    if (time != null) {
      setState(() {
        _selectedTime = time;
      });
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }

  void _saveSchedule() {
    if (_formKey.currentState!.validate() && _selectedTime != null) {
      final now = DateTime.now();
      final selectedDateTime = DateTime(now.year, now.month, now.day, _selectedTime!.hour, _selectedTime!.minute);

      if (selectedDateTime.isBefore(now)) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Please select a time in the future.')),
        );
        return;
      }

      final schedule = {
        'title': _titleController.text,
        'time': _selectedTime,
        'repeat': _repeat,
        'weekdays': _weekdays.entries.where((e) => e.value).map((e) => e.key).toList(),
      };
      Navigator.pop(context, schedule);
    } else if (_selectedTime == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please select a time for the session')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Add Schedule')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'Yoga Session Title'),
                validator: (value) => value == null || value.isEmpty ? 'Please enter a title' : null,
              ),
              const SizedBox(height: 16),
              ListTile(
                title: Text(
                  _selectedTime == null
                      ? 'Select Time'
                      : 'Time: ${_selectedTime!.format(context)}',
                ),
                trailing: Icon(Icons.access_time),
                onTap: _pickTime,
              ),
              DropdownButtonFormField<String>(
                value: _repeat,
                onChanged: (value) => setState(() => _repeat = value!),
                items: const [
                  DropdownMenuItem(value: 'Today', child: Text('Today')),
                  DropdownMenuItem(value: 'Every day', child: Text('Every day')),
                  DropdownMenuItem(value: 'Specific days', child: Text('Specific days')),
                ],
                decoration: const InputDecoration(labelText: 'Repeat'),
              ),
              if (_repeat == 'Specific days') ..._weekdays.keys.map((day) {
                return CheckboxListTile(
                  title: Text(day),
                  value: _weekdays[day],
                  onChanged: (value) => setState(() => _weekdays[day] = value!),
                );
              }).toList(),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _saveSchedule,
                child: Text('Save Schedule'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

-------------------------------------------------------------------

import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'AddScheduleScreen.dart';

class YogaSchedulerHome extends StatefulWidget {
  @override
  _YogaSchedulerHomeState createState() => _YogaSchedulerHomeState();
}

class _YogaSchedulerHomeState extends State<YogaSchedulerHome> {
  final List<Map<String, dynamic>> _schedules = [];
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  @override
  void initState() {
    super.initState();
    tz.initializeTimeZones();
    const initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const initializationSettings =
        InitializationSettings(android: initializationSettingsAndroid);
    _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationResponse,
    );
  }

  void _onNotificationResponse(NotificationResponse response) {
    final payload = response.payload;
    print('response.actionId: ${response.actionId}');
    if (response.actionId == 'snooze') {
      // Handle snooze
      final schedule = _schedules.firstWhere(
          (s) => s['id'].toString() == payload,
          orElse: () => {} // Return an empty map instead of null
          );

      // Check if the schedule is empty
      if (schedule.isNotEmpty) {
        _snoozeNotification(schedule);
      } else {
        // Handle the case where the schedule was not found
        print('Schedule not found for payload: $payload');
      }
    }
  }

  void _snoozeNotification(Map<String, dynamic> schedule) async {
    final snoozeTime = tz.TZDateTime.now(tz.local)
        .add(Duration(minutes: 1)); // Snooze for 5 minutes
    final androidDetails = AndroidNotificationDetails(
      'yoga_channel',
      'Yoga Notifications',
      channelDescription: 'Notifications for Yoga schedules',
      actions: [
        const AndroidNotificationAction(
          'snooze',
          'Snooze',
          showsUserInterface: true,
          cancelNotification: false,
        )
      ],
    );
    final notificationDetails = NotificationDetails(android: androidDetails);
    try {
      await _flutterLocalNotificationsPlugin.zonedSchedule(
        schedule['id'] + Random().nextInt(1000), // Unique snooze ID
        'Yoga Session Reminder (Snoozed)',
        schedule['title'],
        snoozeTime,
        notificationDetails,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );
    } catch (e) {
      print('Error scheduling notification: $e');
    }
  }

  void _scheduleNotification(Map<String, dynamic> schedule) async {
    debugPrint("schedule---$schedule");
    final androidDetails = AndroidNotificationDetails(
      'yoga_channel',
      'Yoga Notifications',
      channelDescription: 'Notifications for Yoga schedules',
      actions: [
        AndroidNotificationAction(
          'snooze',
          'Snooze',
          showsUserInterface: true,
          cancelNotification: false,
        ),
      ],
    );
    final notificationDetails = NotificationDetails(android: androidDetails);

    if (schedule['repeat'] == 'Every day') {
      await _flutterLocalNotificationsPlugin.periodicallyShow(
        schedule['id'],
        'Yoga Session Reminder',
        schedule['title'],
        RepeatInterval.daily,
        notificationDetails,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );
    } else if (schedule['repeat'] == 'Today') {
      final time = schedule['time'];
      final now = DateTime.now();
      final scheduledTime = tz.TZDateTime.local(
          now.year, now.month, now.day, time.hour, time.minute);
      debugPrint('Current time: ${DateTime.now()}');
      debugPrint('Notification scheduled at: $scheduledTime');
      try {
        await _flutterLocalNotificationsPlugin.zonedSchedule(
          schedule['id'],
          'Yoga Session Reminder',
          schedule['title'],
          scheduledTime,
          notificationDetails,
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          uiLocalNotificationDateInterpretation:
              UILocalNotificationDateInterpretation.absoluteTime,
        );
      } catch (e) {
        print('Error scheduling notification: $e');
      }
    } else if (schedule['repeat'] == 'Specific days') {
      for (var day in schedule['weekdays']) {
        final dayOffset =
            ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].indexOf(day);
        final now = DateTime.now();
        final targetDay =
            now.add(Duration(days: (dayOffset - now.weekday + 7) % 7));
        final scheduledTime = tz.TZDateTime.local(
            targetDay.year,
            targetDay.month,
            targetDay.day,
            schedule['time'].hour,
            schedule['time'].minute);
        print('scheduledTime: $scheduledTime');

        try {
          await _flutterLocalNotificationsPlugin.zonedSchedule(
            schedule['id'] + dayOffset,
            'Yoga Session Reminder',
            schedule['title'],
            scheduledTime,
            notificationDetails,
            androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
            uiLocalNotificationDateInterpretation:
                UILocalNotificationDateInterpretation.absoluteTime,
          );
        } catch (e) {
          print('Error scheduling notification: $e');
        }
      }
    }
  }

  void _addSchedule(Map<String, dynamic> schedule) {
    setState(() {
      schedule['id'] = _schedules.length + 1;
      _schedules.add(schedule);
    });
    _scheduleNotification(schedule);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Yoga Session Scheduler')),
      body: ListView.builder(
        itemCount: _schedules.length,
        itemBuilder: (context, index) {
          final schedule = _schedules[index];
          final repeatDays = schedule['repeat'] == 'Specific days'
              ? (schedule['weekdays'] as List<String>).join(', ')
              : schedule['repeat'];
          return ListTile(
            title: Text(schedule['title']),
            subtitle: Text('${schedule['time'].format(context)} - $repeatDays'),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final newSchedule = await Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => AddScheduleScreen()),
          );
          if (newSchedule != null) {
            _addSchedule(newSchedule);
          }
        },
        child: Icon(Icons.add),
      ),
    );
  }
}

-----------------------------------------------------------------------------

<manifest xmlns:tools="http://schemas.android.com/tools"
    xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
    <uses-permission android:name="android.permission.USE_EXACT_ALARM" />
    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />
    <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT" />

    <application
        android:label="flutter_app"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
        <meta-data
            android:name="com.google.firebase.messaging.default_notification_icon"
            android:resource="@mipmap/ic_launcher" />
        <meta-data
            android:name="com.google.firebase.messaging.default_notification_color"
            android:resource="@color/teal_200" />
        <receiver android:exported="false" android:name="com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver" />
        <receiver android:exported="false" android:name="com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver" />
        <receiver android:exported="false" android:name="com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
                <action android:name="android.intent.action.MY_PACKAGE_REPLACED"/>
                <action android:name="android.intent.action.QUICKBOOT_POWERON" />
                <action android:name="com.htc.intent.action.QUICKBOOT_POWERON"/>
            </intent-filter>
        </receiver>
    </application>
</manifest>
